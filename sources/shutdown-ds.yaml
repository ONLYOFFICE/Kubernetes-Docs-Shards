apiVersion: batch/v1
kind: Job
metadata:
  name: shutdown-ds
spec:
  backoffLimit: 2
  template:
    spec:
      serviceAccountName: ds-balancer-sa
      volumes:
      - name: shutdown-ds
        configMap:
          name: shutdown-ds
          defaultMode: 0755
      containers:
        - name: shutdown-ds
          image: onlyoffice/docs-utils:8.3.2-1
          env:
          - name: DS_EP_NAME
            value: "documentserver"
          command: ['python', '/scripts/stop.py']
          volumeMounts:
          - name: shutdown-ds
            mountPath: /scripts/stop.py
            subPath: stop.py
      restartPolicy: Never

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: shutdown-ds
data:
  stop.py: |-
    import os
    import subprocess
    import logging
    import time
    from kubernetes import client

    ep_name = os.environ["DS_EP_NAME"]
    field_name = f'metadata.name={ep_name}'

    k8s_host = os.environ["KUBERNETES_SERVICE_HOST"]
    api_server = f'https://{k8s_host}'
    pathCrt = '/run/secrets/kubernetes.io/serviceaccount/ca.crt'
    pathToken = '/run/secrets/kubernetes.io/serviceaccount/token'
    pathNS = '/run/secrets/kubernetes.io/serviceaccount/namespace'

    with open(pathToken, "r") as f_tok:
        token = f_tok.read()

    with open(pathNS, "r") as f_ns:
        ns = f_ns.read()

    configuration = client.Configuration()
    configuration.ssl_ca_cert = pathCrt
    configuration.host = api_server
    configuration.verify_ssl = True
    configuration.debug = False
    configuration.api_key = {"authorization": "Bearer " + token}
    client.Configuration.set_default(configuration)
    v1 = client.CoreV1Api()

    total_result = {}


    def init_logger(name):
        logger = logging.getLogger(name)
        formatter = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        logger.setLevel(logging.DEBUG)
        stdout = logging.StreamHandler()
        stdout.setFormatter(logging.Formatter(formatter))
        stdout.setLevel(logging.DEBUG)
        logger.addHandler(stdout)
        logger.info('Running the script to shutdown the Shards\n')


    def prepare_for_shutdown_shard(ep_ds):
        for ep_ip in ep_ds:
            try:
                pod_name = ep_ip.target_ref.name
                logger_shutdown_ds.info(f'Shutdown command sent to the {pod_name} shard')
                shutdown_cmd = ["/bin/bash", "-c", f"curl http://{ep_ip.ip}:8000/internal/cluster/inactive -X PUT -s"]
                process = subprocess.Popen(shutdown_cmd, stdout=subprocess.PIPE)
                shutdown_result = process.communicate()[0].decode('utf-8')
            except Exception as msg_url:
                logger_shutdown_ds.error(f'Failed to check the availability of the {pod_name}... {msg_url}')
                total_result[pod_name] = 'Failed'
            else:
                logger_shutdown_ds.info(f'The result of executing the {pod_name} shutdown command: {shutdown_result}\n')


    def get_shutdown_status():
        while True:
            proc = 'internal/cluster/inactive'
            try:
                processes_list = ["/bin/bash", "-c", "ps aux"]
                processes = subprocess.Popen(processes_list, stdout=subprocess.PIPE)
                processes_result = processes.communicate()[0].decode('utf-8')
            except Exception as msg_get_processes:
                logger_shutdown_ds.error(f'Error when trying to list of running processes... {msg_get_processes}')
                break
            else:
                if proc in processes_result:
                    logger_shutdown_ds.info('Found shards where shutdown continues. Waiting...')
                    time.sleep(5)
                else:
                    logger_shutdown_ds.info('Shards shutdown completed successfully')
                    break


    def get_ds_ep():
        try:
            ep_list = v1.list_namespaced_endpoints(namespace=ns, field_selector=field_name)
            if ep_list.items[0].subsets:
                ep_ds = ep_list.items[0].subsets[0].addresses
                if not ep_ds:
                    logger_shutdown_ds.warning(f'Empty "{ep_name}" endpoints list')
                else:
                    prepare_for_shutdown_shard(ep_ds)
                    get_shutdown_status()
            else:
                logger_shutdown_ds.warning(f'There are no addresses for endpoint "{ep_name}"')
        except Exception as msg_get_ep:
            logger_shutdown_ds.error(f'Trying to search "{ep_name}" endpoints... {msg_get_ep}')


    def total_status():
        if 'Failed' in total_result.values():
            for key, value in total_result.items():
                logger_shutdown_ds.info(f'{key} = {value}')


    init_logger('shutdown')
    logger_shutdown_ds = logging.getLogger('shutdown.ds')
    get_ds_ep()
    total_status()
