{{- if index .Values "ingress-nginx" "enabled" }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: balancer-snippet
  namespace: {{ .Values.documentserver.ingressCustomConfigMapsNamespace }}
  {{- if .Values.commonLabels }}
  labels:
    {{- include "ds.labels.commonLabels" . | trim | nindent 4 }}
  {{- end }}
  annotations:
    helm.sh/resource-policy: keep
    helm.sh/hook: pre-install
    helm.sh/hook-weight: "1"
    {{- if .Values.commonAnnotations }}
    {{- include "ds.annotations.commonAnnotations" ( dict "keyName" .Values.commonAnnotations "context" $ ) | nindent 4 }}
    {{- end }}
data:
  custom_balancer.conf: |
    access_by_lua_block {
      if ngx.var.service_name == {{ default "documentserver" .Values.service.existing | quote }} then
        local WOPISrc = ngx.var.arg_WOPISrc
        local shardkey = ngx.var.arg_shardkey
        local service_name = ngx.var.service_name
        local redis = require "resty.redis"
        local red = redis:new()
        local cjson = require("cjson.safe")
        local configuration = require("configuration")
        local request_uri = ngx.var.request_uri
        local requested_version = request_uri:match("/([%d%.%-]+%-[^/]+)/")

        local function redis_del(key)
          local ok, err = red:del(string.format("%s", key))
          if not ok then
             ngx.say("failed to del: ", err)
             return
          end
        end
                                
        local function redis_get(wopi)
          local user_data_response = red:get(string.format('%s', wopi))
          return user_data_response
        end
                                
        local function redis_set(wopi, endpoint)
           local response = red:setnx(string.format('%s', wopi), endpoint)
           if response == 1 then
             print(string.format("DEBUG: --> New api key %s was set in Redis", wopi))
             return true
           end
        end

        local function redis_set_ipkey(wopi, endpoint)
           -- add spaces before add value in key
           -- keys should be like " wopi1 wopi2 wopi3"
           -- if dont make the space it will be "wopi1wopi2wopi3"

           local wopi_final = (string.format(" %s", wopi))
           local ok, err = red:append(string.format('%s', endpoint), wopi_final)
           if not ok then
             ngx.say("failed to set: ",err)
             return
           end
        end
                
        local function redis_expire(wopi, expire)
           local ok, err = red:expire(string.format('%s', wopi), expire)
           if not ok then
             ngx.say("failed to set ttl: ",err)
             return
           end
        end

        local function redis_expire_balancing_endpoint(endpoint, expire)
           red:select({{ .Values.documentserver.dsVersionHashRedisDBNum }})
           local data = red:scan(0, "count", 10000, "match", string.format('%s-*', key))
           local key = tostring(data[2])
           local set_expire = redis_expire(key, expire)
           -- Return to default index db
           red:select({{ .Values.documentserver.keysRedisDBNum }})
        end
                                
        local function get_endpoints(backends, upstream)
           for _, new_backend in ipairs(backends) do
               if new_backend.name == upstream then
                  local new_endpoints=(new_backend.endpoints)
                  return new_endpoints
               end
           end
        end

        local function table_contains(tbl, p, x)
           local found = false
           for _, v in pairs(tbl) do
               local endpoint_string = (string.format("%s:%s", v, p))
               if endpoint_string == x then
                  local found = true
                  return found
               end
           end
           return found
        end

        local function check_endpoint(endpoint)
           local docs_upstream = ngx.var.proxy_upstream_name
           local service_port = ngx.var.service_port
           local backends_data = configuration.get_backends_data()
           local backends = cjson.decode(backends_data)
           local endpoints = get_endpoints(backends, docs_upstream)
           local endpoints_table = {}
                  
           for _, endpoint in ipairs(endpoints) do
               table.insert(endpoints_table, endpoint.address)
           end
           print(cjson.encode(endpoints_table))

           local result = table_contains(endpoints_table, service_port, endpoint)
                                  
           return result
        end

        local function get_docs_mode(wopi)
           if string.match(wopi, "http://") or string.match(wopi, "https://") then
             return "wopi"
           else
             return "api"
           end
        end

        local function get_api_arg()
           if WOPISrc then
             return WOPISrc
           end
           if shardkey then
             return shardkey
           end
        end

        local function handle_api_key(arg)
           if shardkey then
              return shardkey
           end
           if WOPISrc then
              local WOPIDecoded = (ngx.unescape_uri(arg))
              local WOPIkey = WOPIDecoded:gsub("%s+", "")
              return WOPIkey
           end
        end
        
        local function init_redis_connection()
           red:set_timeouts(1000, 1000, 1000) -- 1 sec
           local ok, err = red:connect({{ .Values.connections.redisHost | quote }}, {{ .Values.connections.redisPort }})
           if not ok then
                ngx.say("1: failed to connect: ",err)
                return
           end

           {{- if eq .Values.connections.redisNoPass false }}
           local res, err = red:auth({{ include "ds.redis.pass" . | quote }})
           if not res then
               ngx.say("failed to authenticate: ", err)
               return
           end
           {{- end }}         
        end

        -- return random endpoint from redis by requested version
        local function get_random_endpoint(ver)
           red:select({{ .Values.documentserver.dsVersionHashRedisDBNum }})
           local data
           if ver then
              data = red:scan(0, "count", 10000, "match", string.format('*-%s', ver))
           else
              data = red:scan(0, "count", 10000)
           end
           local static_endpoints = data[2]
           local new_endpoint = tostring((static_endpoints[math.random(1, #static_endpoints)]))
           local random_endpoint = new_endpoint:gsub("%-.+$", "")
           -- return to default db if api_arg in request
           if API_ARG then
               red:select({{ .Values.documentserver.keysRedisDBNum }})
           end
           return random_endpoint
        end
     
        local API_ARG = get_api_arg()

        if API_ARG and requested_version then
           local API_KEY = handle_api_key(API_ARG)
            
           -- init redis connection and then select the db index
           init_redis_connection()

           {{- if ne .Values.documentserver.keysRedisDBNum "0" }}
           red:select({{ .Values.documentserver.keysRedisDBNum }})
           {{- end }}

           local exist_endpoint = tostring(redis_get(API_KEY))
           print(exist_endpoint)
           if exist_endpoint == 'userdata: NULL' then
             local new_custom_endpoint = get_random_endpoint(requested_version)
             if redis_set(API_KEY, new_custom_endpoint) then
                redis_set_ipkey(API_KEY, new_custom_endpoint)
                redis_expire(API_KEY, {{ .Values.documentserver.keysExpireTime }})
                ngx.var.custom_endpoint = new_custom_endpoint
             else
                print("DEBUG: --> Looks like parallel request was made, get endpoint from Redis")
                ngx.var.custom_endpoint = tostring(redis_get(API_KEY))
             end
           else 
             local endpoint_found = check_endpoint(exist_endpoint)
             print(endpoint_found)
             if endpoint_found == false then
                print(string.format("ENDPOINT WILL BE REMOVE:%s", exist_endpoint))
                local placeholder = tostring(red:get(string.format("del_%s", exist_endpoint)))
                if placeholder == 'userdata: NULL' then
                  local default_expire = {{ .Values.documentserver.terminationGracePeriodSeconds }}
                  local placeholder_expire = default_expire + 10
                  local set_placeholder = red:set(string.format("del_%s", exist_endpoint), "placeholder") 
                  local set_placeholder_expire = red:expire(string.format("del_%s", exist_endpoint), placeholder_expire)
                  local keys = tostring(redis_get(exist_endpoint))
                  red:init_pipeline()
                  for i in string.gmatch(keys, "%S+") do
                     red:expire(string.format('%s', i), default_expire)
                  end
                  local results, err = red:commit_pipeline()
                  if not results then
                     ngx.say("failed to commit the pipelined requests: ", err)
                  end
                  -- Set expire for endpoint key that consist all wopi that also will be removed after expire
                  local set_endpoint_expire = redis_expire(exist_endpoint, default_expire)
                  local set_wopi_expire = redis_expire(API_KEY, default_expire)
                  local set_balancing_key_expire = redis_expire_balancing_endpoint(exist_endpoint, default_expire)
                  print("DEBUG: --> Keys remove process is started, send request to upstream")
                  ngx.var.custom_endpoint = exist_endpoint
                else 
                  print("DEBUG: --> Process that reshard keys already exist, send request to upstream")
                  ngx.var.custom_endpoint = exist_endpoint
                end
             else
                print("DEGUB: --> Endpoint exist, just go forward...")
                ngx.var.custom_endpoint = exist_endpoint
                if WOPISrc then
                     redis_expire(API_KEY, {{ .Values.documentserver.keysExpireTime }})
                end
             end
           end
        red:close()
        end
        
        if not API_ARG then
           init_redis_connection()
           local random_endpoint = get_random_endpoint(requested_version)
           ngx.var.custom_endpoint = random_endpoint
        end

      end
     }
     
     if ($service_name = {{ default "documentserver" .Values.service.existing }}) {
         proxy_pass http://$custom_endpoint;
     }
{{- end }}
