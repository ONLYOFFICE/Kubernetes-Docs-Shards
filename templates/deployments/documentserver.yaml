apiVersion: apps/v1
kind: Deployment
metadata:
  name: documentserver
  namespace: {{ include "ds.namespace" . | quote }}
  labels:
    app: documentserver
    {{- if .Values.commonLabels }}
    {{- include "ds.labels.commonLabels" . | trim | nindent 4 }}
    {{- end }}
  {{- if or .Values.commonAnnotations .Values.documentserver.annotations }}
  {{- $dictValue := default .Values.commonAnnotations .Values.documentserver.annotations }}
  annotations: {{- include "ds.annotations.commonAnnotations" ( dict "keyName" $dictValue "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  {{- if not .Values.documentserver.autoscaling.enabled }}
  replicas: {{ .Values.documentserver.replicas }}
  {{- end }}
  selector:
    matchLabels:
      app: documentserver
      {{- if .Values.commonLabels }}
      {{- include "ds.labels.commonLabels" . | trim | nindent 6 }}
      {{- end }}
  {{- if .Values.documentserver.updateStrategy }}
  strategy: {{- include "ds.update.strategyType" .Values.documentserver.updateStrategy }}
  {{- end }}
  template:
    metadata:
      labels:
        app: documentserver
        {{- if .Values.commonLabels }}
        {{- include "ds.labels.commonLabels" . | trim | nindent 8 }}
        {{- end }}
      {{- if .Values.documentserver.podAnnotations }}
      annotations:
        {{- range $key, $value := .Values.documentserver.podAnnotations }}
        {{ $key }}: {{ tpl $value $ }}
        {{- end }}
      {{- end }}
    spec:
      serviceAccountName: {{ include "ds.serviceAccountName" . }}
      {{- if .Values.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      affinity:
        podAntiAffinity:
          {{- if eq .Values.podAntiAffinity.type "soft" }}
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - documentserver
              topologyKey: {{ .Values.podAntiAffinity.topologyKey }}
            weight: {{ .Values.podAntiAffinity.weight }}
          {{- else if eq .Values.podAntiAffinity.type "hard" }}
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - documentserver
            topologyKey: {{ .Values.podAntiAffinity.topologyKey }}
          {{- end }}
          {{- with .Values.documentserver.customPodAntiAffinity }}
          {{- toYaml . | nindent 10 }}
          {{- end }}
        {{- with .Values.documentserver.podAffinity }}
        podAffinity:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        {{- with .Values.documentserver.nodeAffinity }}
        nodeAffinity:
          {{- toYaml . | nindent 10 }}
        {{- end }}
      {{- if or .Values.nodeSelector .Values.documentserver.nodeSelector }}
      nodeSelector: {{ toYaml (default .Values.nodeSelector .Values.documentserver.nodeSelector) | nindent 8 }}
      {{- end }}
      {{- if or .Values.tolerations .Values.documentserver.tolerations }}
      tolerations: {{ toYaml (default .Values.tolerations .Values.documentserver.tolerations) | nindent 8 }}
      {{- end }}
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
      - name: {{ .Values.imagePullSecrets }}
      {{- end }}
      terminationGracePeriodSeconds: {{ .Values.documentserver.terminationGracePeriodSeconds }}
      {{- if .Values.documentserver.hostAliases }}
      hostAliases: {{- toYaml .Values.documentserver.hostAliases | nindent 8 }}
      {{- end }}
      initContainers:
        - name: add-shardkey
          image: {{ .Values.documentserver.initContainers.image.repository }}:{{ .Values.documentserver.initContainers.image.tag }}
          imagePullPolicy: {{ .Values.documentserver.initContainers.image.pullPolicy }}
          {{- if .Values.documentserver.initContainers.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.documentserver.initContainers.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          resources: {{- toYaml .Values.documentserver.initContainers.resources | nindent 12 }}
          env:
          - name: REDIS_SERVER_DB_KEYS_NUM
            value: {{ .Values.documentserver.keysRedisDBNum | quote }}
          - name: REDIS_SERVER_PWD
            valueFrom:
              secretKeyRef:
                name: {{ template "ds.redis.secretName" . }}
                key: {{ .Values.connections.redisSecretKeyName }}
          - name: DEFAULT_SHARD_KEY
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          {{- if eq .Values.connections.redisConnectorName "ioredis" }}
          - name: REDIS_SENTINEL_PWD
            valueFrom:
              secretKeyRef:
                name: {{ template "ds.redis.sentinel.secretName" . }}
                key: {{ .Values.connections.redisSentinelSecretKeyName }}
          {{- end }}
          - name: SHARD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: SHARD_PORT
            value: {{ .Values.documentserver.proxy.containerPorts.http | quote }}
          - name: APP_VERSION
            value: {{ regexFind "[0-9.]+" .Values.documentserver.docservice.image.tag | quote }}
          envFrom:
          - configMapRef:
              name: documentserver
          command: ['python', '/scripts/add_shardkey.py']
          volumeMounts:
          - name: add-shardkey
            mountPath: /scripts/add_shardkey.py
            subPath: add_shardkey.py
      {{- with .Values.documentserver.initContainers.custom }}
      {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: proxy
          image: {{ .Values.documentserver.proxy.image.repository }}:{{ .Values.documentserver.proxy.image.tag }}
          imagePullPolicy: {{ .Values.documentserver.proxy.image.pullPolicy }}
          {{- if .Values.documentserver.proxy.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.documentserver.proxy.containerSecurityContext.enabled "enabled" | toYaml | nindent 12 }}
          {{- end }}
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh", "-c", "/scripts/pre_stop.sh"]
          ports:
            - containerPort: {{ .Values.documentserver.proxy.containerPorts.http }}
          {{- if .Values.documentserver.proxy.startupProbe.enabled }}
          startupProbe: {{- omit .Values.documentserver.proxy.startupProbe "enabled" | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.documentserver.proxy.readinessProbe.enabled }}
          readinessProbe: {{- omit .Values.documentserver.proxy.readinessProbe "enabled" | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.documentserver.proxy.livenessProbe.enabled }}
          livenessProbe: {{- omit .Values.documentserver.proxy.livenessProbe "enabled" | toYaml | nindent 12 }}
          {{- end }}
          resources: {{ toYaml .Values.documentserver.proxy.resources | nindent 12 }}
          env:
          - name: DEFAULT_SHARD_KEY
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          {{- if .Values.documentserver.proxy.infoAllowedIP }}
          - name: INFO_ALLOWED_IP
            value: {{ join " " .Values.documentserver.proxy.infoAllowedIP }}
          {{- end }}
          {{- if .Values.documentserver.proxy.infoAllowedUser }}
          - name: INFO_ALLOWED_USER
            value: {{ .Values.documentserver.proxy.infoAllowedUser }}
          - name: INFO_ALLOWED_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ template "ds.info.secretName" . }}
                key: {{ .Values.documentserver.proxy.infoAllowedSecretKeyName }}
          {{- end }}
          envFrom:
          - secretRef:
              name: {{ template "ds.secureLinkSecret.secretName" . }}
          - configMapRef:
              name: documentserver
          volumeMounts:
          - name: ds-files
            mountPath: /var/lib/{{ .Values.product.name }}/documentserver/App_Data/cache/files/{{ .Values.documentserver.docservice.image.tag }}
          - name: ds-service-files
            mountPath: /var/lib/{{ .Values.product.name }}/documentserver/App_Data/cache/files
          - name: pre-stop-scripts
            mountPath: /scripts/pre_stop.sh
            subPath: pre_stop.sh
          - name: pre-stop-status
            mountPath: /scripts/results
          {{- if .Values.extraThemes.configMap }}
          - name: custom-themes
            mountPath: /var/www/{{ .Values.product.name }}/documentserver/web-apps/apps/common/main/resources/themes/{{ .Values.extraThemes.filename }}
            subPath: {{ .Values.extraThemes.filename }}
          {{- end }}
          {{- if not .Values.documentserver.proxy.welcomePage.enabled }}
          - name: ds-welcome-page
            mountPath: /etc/nginx/includes/ds-example.conf
            subPath: ds-example.conf
          {{- end }}
          {{- with .Values.documentserver.proxy.extraVolumeMounts }}
          {{- toYaml . | nindent 10 }}
          {{- end }}

        - name: docservice
          image: {{ .Values.documentserver.docservice.image.repository }}:{{ .Values.documentserver.docservice.image.tag }}
          imagePullPolicy: {{ .Values.documentserver.docservice.image.pullPolicy }}
          {{- if .Values.documentserver.docservice.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.documentserver.docservice.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          lifecycle:
            preStop:
              exec:
                command: ["python3", "/var/lib/{{ .Values.product.name }}/documentserver/scripts/remove_shardkey.py"]
          ports:
            - containerPort: {{ .Values.documentserver.docservice.containerPorts.http }}
          {{- if .Values.documentserver.docservice.startupProbe.enabled }}
          startupProbe: {{- omit .Values.documentserver.docservice.startupProbe "enabled" | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.documentserver.docservice.readinessProbe.enabled }}
          readinessProbe: {{- omit .Values.documentserver.docservice.readinessProbe "enabled" | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.documentserver.docservice.livenessProbe.enabled }}
          livenessProbe: {{- omit .Values.documentserver.docservice.livenessProbe "enabled" | toYaml | nindent 12 }}
          {{- end }}
          resources: {{ toYaml .Values.documentserver.docservice.resources | nindent 12 }}
          env:
          - name: DEFAULT_SHARD_KEY
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: SHARD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: SHARD_PORT
            value: {{ .Values.documentserver.proxy.containerPorts.http | quote }}
          - name: TERMINATION_GRACE_PERIOD
            value: {{ .Values.documentserver.terminationGracePeriodSeconds | quote }}
          {{- if eq .Values.connections.redisConnectorName "ioredis" }}
          - name: REDIS_SENTINEL_PWD
            valueFrom:
              secretKeyRef:
                name: {{ template "ds.redis.sentinel.secretName" . }}
                key: {{ .Values.connections.redisSentinelSecretKeyName }}
          {{- end }}
          - name: REDIS_SERVER_DB_KEYS_NUM
            value: {{ .Values.documentserver.keysRedisDBNum | quote }}
          - name: REDIS_SERVER_PWD
            valueFrom:
              secretKeyRef:
                name: {{ template "ds.redis.secretName" . }}
                key: {{ .Values.connections.redisSecretKeyName }}
          - name: TERMINATION_GRACE_TIME
            value: {{ .Values.documentserver.terminationGraceTimeSeconds | quote }}
          envFrom:
          - secretRef:
              name: {{ template "ds.jwt.secretName" . }}
          - secretRef:
              name: {{ template "ds.secureLinkSecret.secretName" . }}
          {{- if .Values.wopi.enabled }}
          {{- if or .Values.wopi.keys.generation .Values.wopi.keys.newKeysExistingSecret }}
          - secretRef:
              {{- if .Values.wopi.keys.newKeysExistingSecret }}
              name: {{ tpl .Values.wopi.keys.newKeysExistingSecret $ }}
              {{- else }}
              name: docs-wopi-keys
              {{- end }}
          {{- end }}
          {{- if or .Values.wopi.keys.generation .Values.wopi.keys.oldKeysExistingSecret }}
          - secretRef:
              {{- if .Values.wopi.keys.oldKeysExistingSecret }}
              name: {{ tpl .Values.wopi.keys.oldKeysExistingSecret $ }}
              {{- else }}
              name: docs-wopi-keys-old
              {{- end }}
          {{- end }}
          {{- end }}
          - configMapRef:
              name: documentserver
          volumeMounts:
          - name: ds-files
            mountPath: /var/lib/{{ .Values.product.name }}/documentserver/App_Data/cache/files/{{ .Values.documentserver.docservice.image.tag }}
          - name: ds-service-files
            mountPath: /var/lib/{{ .Values.product.name }}/documentserver/App_Data/cache/files
          {{- if .Values.persistence.runtimeConfig.enabled }}
          - name: ds-runtime-config
            mountPath: /var/www/{{ .Values.product.name }}/config
          {{- end }}
          - name: config-file
            mountPath: /etc/{{ .Values.product.name }}/documentserver/local.json
            subPath: local.json
          - name: ds-license
            mountPath: /var/www/{{ .Values.product.name }}/Data
            {{- if not .Values.license.existingClaim }}
            readOnly: true
            {{- end }}
          - name: pre-stop-status
            mountPath: /scripts/results
          {{- if .Values.extraConf.configMap }}
          - name: custom-file
            mountPath: /etc/{{ .Values.product.name }}/documentserver/{{ .Values.extraConf.filename }}
            subPath: {{ .Values.extraConf.filename }}
          {{- end }}
          {{- if .Values.extraThemes.configMap }}
          - name: custom-themes
            mountPath: /var/www/{{ .Values.product.name }}/documentserver/web-apps/apps/common/main/resources/themes/{{ .Values.extraThemes.filename }}
            subPath: {{ .Values.extraThemes.filename }}
          {{- end }}
          - name: remove-shardkey
            mountPath: /var/lib/{{ .Values.product.name }}/documentserver/scripts/remove_shardkey.py
            subPath: remove_shardkey.py
          {{- with .Values.documentserver.docservice.extraVolumeMounts }}
          {{- toYaml . | nindent 10 }}
          {{- end }}

        {{- $context := . }}
        {{- $converterCount := (toString .Values.documentserver.converter.count) }}
        {{- range $i := until (atoi $converterCount) }}
        - name: converter-{{ $i }}
          image: {{ $context.Values.documentserver.converter.image.repository }}:{{ $context.Values.documentserver.converter.image.tag }}
          imagePullPolicy: {{ $context.Values.documentserver.converter.image.pullPolicy }}
          {{- if $context.Values.documentserver.converter.containerSecurityContext.enabled }}
          securityContext: {{- omit $context.Values.documentserver.converter.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          resources: {{- toYaml $context.Values.documentserver.converter.resources | nindent 12 }}
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh", "-c", "/scripts/pre_stop.sh"]
          env:
          - name: DEFAULT_SHARD_KEY
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: REDIS_SERVER_PWD
            valueFrom:
              secretKeyRef:
                name: {{ template "ds.redis.secretName" $context }}
                key: {{ $context.Values.connections.redisSecretKeyName }}
          {{- if eq $context.Values.connections.redisConnectorName "ioredis" }}
          - name: REDIS_SENTINEL_PWD
            valueFrom:
              secretKeyRef:
                name: {{ template "ds.redis.sentinel.secretName" $context }}
                key: {{ $context.Values.connections.redisSentinelSecretKeyName }}
          {{- end }}
          envFrom:
          - secretRef:
              name: {{ template "ds.jwt.secretName" $context }}
          - secretRef:
              name: {{ template "ds.secureLinkSecret.secretName" $context }}
          {{- if $context.Values.wopi.enabled }}
          {{- if or $context.Values.wopi.keys.generation $context.Values.wopi.keys.newKeysExistingSecret }}
          - secretRef:
              {{- if $context.Values.wopi.keys.newKeysExistingSecret }}
              name: {{ tpl $context.Values.wopi.keys.newKeysExistingSecret $ }}
              {{- else }}
              name: docs-wopi-keys
              {{- end }}
          {{- end }}
          {{- if or $context.Values.wopi.keys.generation $context.Values.wopi.keys.oldKeysExistingSecret }}
          - secretRef:
              {{- if $context.Values.wopi.keys.oldKeysExistingSecret }}
              name: {{ tpl $context.Values.wopi.keys.oldKeysExistingSecret $ }}
              {{- else }}
              name: docs-wopi-keys-old
              {{- end }}
          {{- end }}
          {{- end }}
          - configMapRef:
              name: documentserver
          volumeMounts:
          - name: ds-files
            mountPath: /var/lib/{{ $context.Values.product.name }}/documentserver/App_Data/cache/files/{{ $context.Values.documentserver.docservice.image.tag }}
          - name: ds-service-files
            mountPath: /var/lib/{{ $context.Values.product.name }}/documentserver/App_Data/cache/files
          {{- if $context.Values.persistence.runtimeConfig.enabled }}
          - name: ds-runtime-config
            mountPath: /var/www/{{ $context.Values.product.name }}/config
          {{- end }}
          - name: config-file
            mountPath: /etc/{{ $context.Values.product.name }}/documentserver/local.json
            subPath: local.json
          - name: ds-license
            mountPath: /var/www/{{ $context.Values.product.name }}/Data
            {{- if not $context.Values.license.existingClaim }}
            readOnly: true
            {{- end }}
          - name: pre-stop-scripts
            mountPath: /scripts/pre_stop.sh
            subPath: pre_stop.sh
          - name: pre-stop-status
            mountPath: /scripts/results
          {{- if $context.Values.extraConf.configMap }}
          - name: custom-file
            mountPath: /etc/{{ $context.Values.product.name }}/documentserver/{{ $context.Values.extraConf.filename }}
            subPath: {{ $context.Values.extraConf.filename }}
          {{- end }}
          {{- if $context.Values.extraThemes.configMap }}
          - name: custom-themes
            mountPath: /var/www/{{ $context.Values.product.name }}/documentserver/web-apps/apps/common/main/resources/themes/{{ $context.Values.extraThemes.filename }}
            subPath: {{ $context.Values.extraThemes.filename }}
          {{- end }}
          {{- with $context.Values.documentserver.converter.extraVolumeMounts }}
          {{- toYaml . | nindent 10 }}
          {{- end }}
        {{- end }}

        - name: postgresql
          image: {{ .Values.documentserver.postgresql.image.repository }}:{{ .Values.documentserver.postgresql.image.tag }}
          imagePullPolicy: {{ .Values.documentserver.postgresql.image.pullPolicy }}
          {{- if .Values.documentserver.postgresql.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.documentserver.postgresql.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          resources: {{- toYaml .Values.documentserver.postgresql.resources | nindent 12 }}
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh", "-c", "/scripts/pre_stop.sh"]
          ports:
            - containerPort: {{ .Values.documentserver.postgresql.containerPorts.tcp }}
          env:
          - name: POSTGRES_DB
            valueFrom:
              configMapKeyRef:
                name: documentserver
                key: DB_NAME
          - name: POSTGRES_USER
            valueFrom:
              configMapKeyRef:
                name: documentserver
                key: DB_USER
          - name: POSTGRES_HOST_AUTH_METHOD
            value: trust
          volumeMounts:
          - name: createdb
            mountPath: /docker-entrypoint-initdb.d/createdb.sql
            subPath: createdb.sql
          - name: postgresql-data
            mountPath: /var/lib/postgresql/data
          - name: pre-stop-scripts
            mountPath: /scripts/pre_stop.sh
            subPath: pre_stop.sh
          - name: pre-stop-status
            mountPath: /scripts/results

        - name: rabbitmq
          image: {{ .Values.documentserver.rabbitmq.image.repository }}:{{ .Values.documentserver.rabbitmq.image.tag }}
          imagePullPolicy: {{ .Values.documentserver.rabbitmq.image.pullPolicy }}
          {{- if .Values.documentserver.rabbitmq.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.documentserver.rabbitmq.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          resources: {{- toYaml .Values.documentserver.rabbitmq.resources | nindent 12 }}
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh", "-c", "/scripts/pre_stop.sh"]
          ports:
            - containerPort: {{ .Values.documentserver.rabbitmq.containerPorts.amqp }}
          volumeMounts:
          - name: rabbitmq-data
            mountPath: /var/lib/rabbitmq
          - name: pre-stop-scripts
            mountPath: /scripts/pre_stop.sh
            subPath: pre_stop.sh
          - name: pre-stop-status
            mountPath: /scripts/results
      volumes:
        - name: ds-files
          emptyDir: {}
        - name: pre-stop-status
          emptyDir: {}
        - name: postgresql-data
          emptyDir: {}
        - name: rabbitmq-data
          emptyDir: {}
        - name: ds-service-files
          persistentVolumeClaim:
            claimName: {{ include "ds.pvc.name" (list . .Values.persistence.existingClaim "ds-service-files") }}
        {{- if .Values.persistence.runtimeConfig.enabled }}
        - name: ds-runtime-config
          persistentVolumeClaim:
            claimName: {{ include "ds.pvc.name" (list . .Values.persistence.runtimeConfig.existingClaim "ds-runtime-config") }}
        {{- end }}
        - name: config-file
          configMap:
            name: local-config
        - name: ds-license
          {{- if .Values.license.existingClaim }}
          persistentVolumeClaim:
            claimName: {{ .Values.license.existingClaim }}
          {{- else }}
          secret:
            secretName: {{ template "ds.license.secretName" . }}
          {{- end }}
        {{- if .Values.extraConf.configMap }}
        - name: custom-file
          configMap:
            name: {{ .Values.extraConf.configMap }}
        {{- end }}
        {{- if .Values.extraThemes.configMap }}
        - name: custom-themes
          configMap:
            name: {{ .Values.extraThemes.configMap }}
        {{- end }}
        {{- if not .Values.documentserver.proxy.welcomePage.enabled }}
        - name: ds-welcome-page
          configMap:
            name: ds-welcome-page
        {{- end }}
        - name: createdb
          configMap:
            name: createdb
        - name: add-shardkey
          configMap:
            name: add-shardkey
            defaultMode: 0755
        - name: remove-shardkey
          configMap:
            name: remove-shardkey
            defaultMode: 0755
        - name: pre-stop-scripts
          configMap:
            name: pre-stop
            defaultMode: 0755
        {{- with .Values.documentserver.extraVolumes }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
